@toString:
    push rbp
    mov rbp, rsp
    
    cmp rdi, 0
    jge __positive@toString
    neg rdi
    push rdi
	mov rdi, 30
	call malloc
	lea rdi, [rax+29]
	pop rax
	mov rsi, 10
	mov byte [rdi], 0
	xor rcx, rcx
__loop_negative@toString:
	dec rdi
	inc rcx
	xor rdx, rdx
	idiv rsi
	add rdx, 48
	mov byte [rdi], dl
	cmp rax, 0
	jnz __loop_negative@toString
	dec rdi
	mov byte [rdi], 45
	inc rcx
	lea rax, [rdi-8]
	mov qword [rax], rcx
	leave
	ret
__positive@toString:
    push rdi
	mov rdi, 30
	call malloc
	lea rdi, [rax+29]
	pop rax
	mov rsi, 10
	mov byte [rdi], 0
	xor rcx, rcx
__loop_positive@toString:
	dec rdi
	inc rcx
	xor rdx, rdx
	idiv rsi
	add rdx, 48
	mov byte [rdi], dl
	cmp rax, 0
	jnz __loop_positive@toString
	lea rax, [rdi-8]
	mov qword [rax], rcx
	leave
	ret
@getInt:
    mov rsi, int$buf
    mov rdi, int$fmt
    xor rax, rax
    call scanf
    mov rax, [rel int$buf]
    ret
@print:
    lea rsi, [rdi+8]
    mov rdx, qword [rdi]
    mov rdi, 1
    mov rax, 1
    syscall
    ret
@println:
    lea rsi, [rdi+8]
    mov rdx, qword [rdi]
    mov rdi, 1
    mov rax, 1
    syscall
    mov rsi, fln$fmt
    mov rdx, 1
    mov rdi, 1
    mov rax, 1
    syscall
	ret
@strcat:
    push rbp
    mov rbp, rsp
    push rbx
    push rdi
    push rsi
    mov rdi, qword [rdi]
    add rdi, qword [rsi]
    add rdi, 9
    call malloc
    pop rsi
    pop rdi
    
    mov rbx, qword [rdi]
    mov qword [rax], rbx
    xor rcx, rcx
__loop_1@strcat:
    cmp rcx, rbx
    jge __loop_2_init@strcat
    mov dl, byte [rdi+rcx+8]
    mov byte [rax+rcx+8], dl
    inc rcx
    jmp __loop_1@strcat
__loop_2_init@strcat:
    mov rbx, qword [rsi]
    add qword [rax], rbx
    xor rdi, rdi
__loop_2@strcat:
    cmp rdi, rbx
    jge __loop2_exit@strcat
    mov dl, byte [rsi+rdi+8]
    mov byte [rax+rcx+8], dl
    inc rcx
    inc rdi
    jmp __loop_2@strcat
__loop2_exit@strcat:
    pop rbx
    leave
    ret
@array.size:
    mov rax, qword [rdi-8]
    ret
@string.length:
    mov rax, qword [rdi]
    ret
@string.ord:
    xor rax, rax
    mov al, byte [rdi+rsi+8]
    ret
@string.parseInt:
    mov rdx, qword [rdi]
    xor rax, rax
    xor rcx, rcx
__loop@string.parseInt:
    cmp rdx, 0
    je __loop_exit@string.parseInt
    mov cl, byte [rdi+8]
    cmp cl, 48
    jl __loop_exit@string.parseInt
    cmp cl, 57
    jg __loop_exit@string.parseInt
    
    imul rax, 10
    sub rcx, 48
    add rax, rcx
    inc rdi
    dec rdx
    jmp __loop@string.parseInt
__loop_exit@string.parseInt:
    ret
@string.substring:
    add rdi, rsi
    push rdi
    push rsi
    push rdx
    mov rdi, rdx
    sub rdi, rsi
    add rdi, 9
    call malloc
    pop rdx
    pop rsi
    pop rdi
    sub rdx, rsi
    inc rdx
    mov qword [rax], rdx
    xor rsi, rsi
    add rdi, 8
__loop@string.substring:
    cmp rdx, 0
    je __loop_exit@string.substring
    mov cl, byte [rdi]
    mov byte [rax+rsi+8], cl
    inc rsi
    inc rdi
    dec rdx
    jmp __loop@string.substring
__loop_exit@string.substring:
    ret
@getString:
    mov rdi, 256
    call malloc
    lea rsi, [rax+8]
    mov rdi, str$fmt
    xor rax, rax
    push rsi
    call scanf
    pop rsi
    xor rax, rax
__loop@getString:
    cmp byte [rsi+rax], 0
    je __loop_exit@getString
    inc rax
    jmp __loop@getString
__loop_exit@getString:
    mov qword [rsi-8], rax
    lea rax, [rsi-8]
    ret
@strcmp: ; cmp(rdi, rsi)
    add rsi, 8
    add rdi, 8
__loop@strcmp:
    mov cl, byte [rsi]
    cmp cl, byte [rdi]
    jg __loop_pass_exit@strcmp
    jl __loop_fail_exit@strcmp
    cmp cl, 0
    je __loop_wait@strcmp
    cmp byte [rdi], 0
    je __loop_fail_exit@strcmp
    inc rsi
    inc rdi
    jmp __loop@strcmp
__loop_wait@strcmp:
    cmp byte [rdi], 0
    je __loop_draw_exit@strcmp
__loop_pass_exit@strcmp:
    mov al, -1
    ret
__loop_fail_exit@strcmp:
    mov al, 1
    ret
__loop_draw_exit@strcmp:
    xor al, al
    ret
