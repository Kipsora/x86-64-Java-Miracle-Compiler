package com.miracle.intermediate.visitor;

import com.miracle.intermediate.MiracleIR;
import com.miracle.intermediate.instruction.MiracleIRBinaryArithmetic;
import com.miracle.intermediate.instruction.MiracleIRCall;
import com.miracle.intermediate.instruction.MiracleIRMove;
import com.miracle.intermediate.instruction.MiracleIRPrefixArithmetic;
import com.miracle.intermediate.structure.MiracleIRBasicBlock;
import com.miracle.intermediate.structure.MiracleIRFunction;

public class MiracleIRPrinter implements MiracleIRVisitor {
    StringBuilder builder;

    public String getOutput() {
        return builder.toString();
    }

    @Override
    public void visit(MiracleIR ir) {
        builder = new StringBuilder();
        builder.append("; Code generated by Kipsora").append('\n').append('\n');
        builder.append("section .bss:").append('\n');
        ir.globalVariable.forEach((key, value) ->
                builder.append(key).append(':').append('\t')
                        .append("resb").append(' ').append(value.size).append('\n')
        );
        builder.append('\n');
        builder.append("section .data:").append('\n');
        ir.globalString.forEach((key, value) ->
                builder.append(key).append(':').append('\t')
                        .append("db").append(' ').append(value.value.length() + 1)
                        .append(' ').append(value.value).append(", ").append('0')
                        .append('\n')
        );
        builder.append('\n');
        builder.append("section .text:").append('\n');
        ir.globalFunction.forEach((key, value) -> {
            value.accept(this);
            builder.append('\n');
        });
    }

    @Override
    public void visit(MiracleIRBinaryArithmetic binaryArithmetic) {
        builder.append('\t').append(binaryArithmetic.operator).append(' ')
                .append(binaryArithmetic.target).append(", ")
                .append(binaryArithmetic.source).append('\n');
    }

    @Override
    public void visit(MiracleIRMove move) {
        builder.append('\t').append("mov").append(' ').append(move.target)
                .append(", ").append(move.source).append('\n');
    }

    @Override
    public void visit(MiracleIRFunction function) {
        builder.append("func ").append(function.identifier);
        function.parameters.forEach(element -> builder.append(' ').append(element));
        builder.append(' ').append('{').append('\n');
        function.getEntryBasicBlock().accept(this);
        builder.append('}').append('\n');
    }

    @Override
    public void visit(MiracleIRBasicBlock block) {
        builder.append(block.name).append(':').append('\n');
        for (MiracleIRBasicBlock.Node it = block.getHead(); it != block.tail; it = it.getSucc()) {
            it.instruction.accept(this);
        }
    }

    @Override
    public void visit(MiracleIRCall call) {
        builder.append('\t').append("call").append(' ')
                .append(call.function.identifier);
        call.parameters.forEach(element -> builder.append(' ').append(element));
        builder.append('\n');
    }

    @Override
    public void visit(MiracleIRPrefixArithmetic increment) {
        builder.append('\t').append(increment.operator).append(' ')
                .append(increment.target).append('\n');
    }
}
